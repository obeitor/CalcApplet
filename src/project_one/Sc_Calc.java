package project_one;
import java.awt.event.KeyEvent;
import java.awt.event.KeyAdapter;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.text.BadLocationException;
/**
 * @author Abdulgafar Obeitor 007632
 * University of Nottingham
 * Compiled 27/4/2014
 * Version 1
 */
public class Sc_Calc extends javax.swing.JApplet {

    /**
     * Initializes the applet Sc_Calc
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sc_Calc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sc_Calc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sc_Calc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sc_Calc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    setSize(720,420);//set start up size to 680 350
                    initComponents();
                    keyboardSetting();//keyboard setting to disallow unwanted characters from user
                    LogArea.setText("LOG:");//set text of the Log
                    System.out.println(NoOfProcessors);
                }
            });
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Failed to Open Applet");
        }
    }
    //to store the number of processors to allow multithreading
    public static int NoOfProcessors = Runtime.getRuntime().availableProcessors();
    //an array to hold all string that are usable in this calculator
    private static String[] matches={"Abs(","Arg(","r<Ө(","A+Bi(","^(","√(","SIN","COS","TAN","LOG","EXP"};
    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Parent_Tab = new javax.swing.JTabbedPane();
        StandardTab = new javax.swing.JPanel();
        Plus_Btn = new javax.swing.JButton();
        Minus_Btn = new javax.swing.JButton();
        Multiply_Btn = new javax.swing.JButton();
        Divide_Btn = new javax.swing.JButton();
        Bracket_minus_Btn = new javax.swing.JButton();
        Opn_Bracket = new javax.swing.JButton();
        Cls_Bracket = new javax.swing.JButton();
        RootBtn = new javax.swing.JButton();
        PowerBtn = new javax.swing.JButton();
        FunctionsComboBox = new javax.swing.JComboBox();
        Base_Converter = new javax.swing.JPanel();
        FromBase = new javax.swing.JComboBox();
        ToBase = new javax.swing.JComboBox();
        Btn_A = new javax.swing.JButton();
        Btn_C = new javax.swing.JButton();
        Btn_B = new javax.swing.JButton();
        Btn_D = new javax.swing.JButton();
        Btn_F = new javax.swing.JButton();
        Btn_E = new javax.swing.JButton();
        Complex_Tab = new javax.swing.JPanel();
        Button_I = new javax.swing.JButton();
        ComplexOpCombo = new javax.swing.JComboBox();
        Plus_Btn1 = new javax.swing.JButton();
        Minus_Btn1 = new javax.swing.JButton();
        Multiply_Btn1 = new javax.swing.JButton();
        Divide_Btn1 = new javax.swing.JButton();
        PolarSignBtn = new javax.swing.JButton();
        Matrix_Tab = new javax.swing.JPanel();
        Cr8MatrixBtn = new javax.swing.JButton();
        MatrixParameter1 = new javax.swing.JComboBox();
        MatrixOperator = new javax.swing.JComboBox();
        MatrixParameter2 = new javax.swing.JComboBox();
        ChangeMatrixValue = new javax.swing.JButton();
        ViewMatrixBtn = new javax.swing.JButton();
        DeterminantBtn = new javax.swing.JButton();
        Equation_Tab = new javax.swing.JPanel();
        EqnComboBox = new javax.swing.JComboBox();
        ValLabel1 = new javax.swing.JLabel();
        ValLabel2 = new javax.swing.JLabel();
        ValLabel3 = new javax.swing.JLabel();
        ValLabel4 = new javax.swing.JLabel();
        ValTextField1 = new javax.swing.JTextField();
        ValTextField2 = new javax.swing.JTextField();
        ValTextField3 = new javax.swing.JTextField();
        ValTextField4 = new javax.swing.JTextField();
        Instruction = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LogArea = new javax.swing.JTextArea();
        Display = new javax.swing.JTextField();
        CalculatorLabel = new javax.swing.JLabel();
        CommonTab = new javax.swing.JPanel();
        Btn_1 = new javax.swing.JButton();
        Btn_2 = new javax.swing.JButton();
        Btn_3 = new javax.swing.JButton();
        Btn_4 = new javax.swing.JButton();
        Btn_5 = new javax.swing.JButton();
        Btn_6 = new javax.swing.JButton();
        Btn_7 = new javax.swing.JButton();
        Btn_8 = new javax.swing.JButton();
        Btn_9 = new javax.swing.JButton();
        Btn_0 = new javax.swing.JButton();
        Btn_Ans = new javax.swing.JButton();
        Btn_DecPnt = new javax.swing.JButton();
        Settings = new javax.swing.JLabel();
        Del_Btn = new javax.swing.JButton();
        CE_Btn = new javax.swing.JButton();
        Clear_Btn = new javax.swing.JButton();

        Parent_Tab.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        Parent_Tab.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                Parent_TabStateChanged(evt);
            }
        });

        Plus_Btn.setFont(new java.awt.Font("Times New Roman", 1, 14));
        Plus_Btn.setText("+");
        Plus_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Plus_BtnActionPerformed(evt);
            }
        });

        Minus_Btn.setFont(new java.awt.Font("Tahoma", 1, 18));
        Minus_Btn.setText("-");
        Minus_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Minus_BtnActionPerformed(evt);
            }
        });

        Multiply_Btn.setFont(new java.awt.Font("Tahoma", 1, 14));
        Multiply_Btn.setText("x");
        Multiply_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Multiply_BtnActionPerformed(evt);
            }
        });

        Divide_Btn.setFont(new java.awt.Font("Tahoma", 1, 10));
        Divide_Btn.setText("÷");
        Divide_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Divide_BtnActionPerformed(evt);
            }
        });

        Bracket_minus_Btn.setFont(new java.awt.Font("Times New Roman", 1, 14));
        Bracket_minus_Btn.setText("(-)");
        Bracket_minus_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bracket_minus_BtnActionPerformed(evt);
            }
        });

        Opn_Bracket.setFont(new java.awt.Font("Tahoma", 1, 12));
        Opn_Bracket.setText("(");
        Opn_Bracket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Opn_BracketActionPerformed(evt);
            }
        });

        Cls_Bracket.setFont(new java.awt.Font("Tahoma", 1, 12));
        Cls_Bracket.setText(")");
        Cls_Bracket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cls_BracketActionPerformed(evt);
            }
        });

        RootBtn.setFont(new java.awt.Font("Tahoma", 1, 12));
        RootBtn.setText("x√y");
        RootBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RootBtnActionPerformed(evt);
            }
        });

        PowerBtn.setFont(new java.awt.Font("Tahoma", 1, 12));
        PowerBtn.setText("x^y");
        PowerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PowerBtnActionPerformed(evt);
            }
        });

        FunctionsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "...", "SIN", "COS", "TAN", "LOG", "EXP" }));
        FunctionsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FunctionsComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout StandardTabLayout = new javax.swing.GroupLayout(StandardTab);
        StandardTab.setLayout(StandardTabLayout);
        StandardTabLayout.setHorizontalGroup(
            StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StandardTabLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StandardTabLayout.createSequentialGroup()
                        .addGroup(StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, StandardTabLayout.createSequentialGroup()
                                .addComponent(Divide_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Opn_Bracket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, StandardTabLayout.createSequentialGroup()
                                .addComponent(Plus_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Minus_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Cls_Bracket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Multiply_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, Short.MAX_VALUE)))
                    .addGroup(StandardTabLayout.createSequentialGroup()
                        .addGroup(StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Bracket_minus_Btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RootBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FunctionsComboBox, 0, 69, Short.MAX_VALUE)
                            .addComponent(PowerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))))
                .addContainerGap())
        );
        StandardTabLayout.setVerticalGroup(
            StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StandardTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Plus_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Multiply_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Minus_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Divide_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Opn_Bracket, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cls_Bracket, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bracket_minus_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FunctionsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(StandardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RootBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PowerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(90, Short.MAX_VALUE))
        );

        Parent_Tab.addTab("STANDARD", null, StandardTab, "Standard Calculator");

        FromBase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Convert From Base 2", "Convert From Base 3", "Convert From Base 4", "Convert From Base 5", "Convert From Base 6", "Convert From Base 7", "Convert From Base 8", "Convert From Base 9", "Convert From Base 10", "Convert From Base 16" }));
        FromBase.setToolTipText("Select Convert From");

        ToBase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "To Base 2", "To Base 3", "To Base 4", "To Base 5", "To Base 6", "To Base 7", "To Base 8", "To Base 9", "To Base 10", "To Base 16" }));
        ToBase.setSelectedIndex(8);
        ToBase.setToolTipText("Select Convert To");

        Btn_A.setFont(new java.awt.Font("Tahoma", 1, 10));
        Btn_A.setText("A");
        Btn_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_AActionPerformed(evt);
            }
        });

        Btn_C.setFont(new java.awt.Font("Tahoma", 1, 10));
        Btn_C.setText("C");
        Btn_C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_CActionPerformed(evt);
            }
        });

        Btn_B.setFont(new java.awt.Font("Tahoma", 1, 10));
        Btn_B.setText("B");
        Btn_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_BActionPerformed(evt);
            }
        });

        Btn_D.setFont(new java.awt.Font("Tahoma", 1, 10));
        Btn_D.setText("D");
        Btn_D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_DActionPerformed(evt);
            }
        });

        Btn_F.setFont(new java.awt.Font("Tahoma", 1, 10));
        Btn_F.setText("F");
        Btn_F.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_FActionPerformed(evt);
            }
        });

        Btn_E.setFont(new java.awt.Font("Tahoma", 1, 10));
        Btn_E.setText("E");
        Btn_E.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_EActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Base_ConverterLayout = new javax.swing.GroupLayout(Base_Converter);
        Base_Converter.setLayout(Base_ConverterLayout);
        Base_ConverterLayout.setHorizontalGroup(
            Base_ConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Base_ConverterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Base_ConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ToBase, javax.swing.GroupLayout.Alignment.TRAILING, 0, 174, Short.MAX_VALUE)
                    .addComponent(FromBase, 0, 174, Short.MAX_VALUE)
                    .addGroup(Base_ConverterLayout.createSequentialGroup()
                        .addComponent(Btn_A, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addComponent(Btn_B, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(Base_ConverterLayout.createSequentialGroup()
                        .addComponent(Btn_C, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addComponent(Btn_D, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Base_ConverterLayout.createSequentialGroup()
                        .addComponent(Btn_E, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addComponent(Btn_F, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        Base_ConverterLayout.setVerticalGroup(
            Base_ConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Base_ConverterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FromBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ToBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(Base_ConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_A, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_B, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Base_ConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_C, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_D, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Base_ConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_F, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_E, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(80, Short.MAX_VALUE))
        );

        Parent_Tab.addTab("BASE", null, Base_Converter, "Base Converter");

        Button_I.setFont(new java.awt.Font("Tahoma", 1, 12));
        Button_I.setText("i");
        Button_I.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_IActionPerformed(evt);
            }
        });

        ComplexOpCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Operation", "Calculate Absolute Value", "Calculate Argument Value", "Convert to Polar Form", "Convert to Co-ordinate Form" }));
        ComplexOpCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComplexOpComboActionPerformed(evt);
            }
        });

        Plus_Btn1.setFont(new java.awt.Font("Times New Roman", 1, 14));
        Plus_Btn1.setText("+");
        Plus_Btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Plus_Btn1ActionPerformed(evt);
            }
        });

        Minus_Btn1.setFont(new java.awt.Font("Tahoma", 1, 18));
        Minus_Btn1.setText("-");
        Minus_Btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Minus_Btn1ActionPerformed(evt);
            }
        });

        Multiply_Btn1.setFont(new java.awt.Font("Tahoma", 1, 14));
        Multiply_Btn1.setText("x");
        Multiply_Btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Multiply_Btn1ActionPerformed(evt);
            }
        });

        Divide_Btn1.setFont(new java.awt.Font("Tahoma", 1, 10));
        Divide_Btn1.setText("÷");
        Divide_Btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Divide_Btn1ActionPerformed(evt);
            }
        });

        PolarSignBtn.setFont(new java.awt.Font("Tahoma", 1, 10));
        PolarSignBtn.setText("<");
        PolarSignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PolarSignBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Complex_TabLayout = new javax.swing.GroupLayout(Complex_Tab);
        Complex_Tab.setLayout(Complex_TabLayout);
        Complex_TabLayout.setHorizontalGroup(
            Complex_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Complex_TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Complex_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ComplexOpCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(Complex_TabLayout.createSequentialGroup()
                        .addGroup(Complex_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Button_I, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Complex_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(Multiply_Btn1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Plus_Btn1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(55, 55, 55)
                        .addGroup(Complex_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Minus_Btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Divide_Btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PolarSignBtn))))
                .addContainerGap())
        );
        Complex_TabLayout.setVerticalGroup(
            Complex_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Complex_TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Complex_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Minus_Btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Plus_Btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Complex_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Multiply_Btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Divide_Btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(Complex_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PolarSignBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Button_I, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(ComplexOpCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        Parent_Tab.addTab("COMPLEX", null, Complex_Tab, "Complex Number Calculator");

        Cr8MatrixBtn.setText("Create New Matrix");
        Cr8MatrixBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cr8MatrixBtnActionPerformed(evt);
            }
        });

        MatrixParameter1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "..." }));
        MatrixParameter1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MatrixParameter1ActionPerformed(evt);
            }
        });

        MatrixOperator.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Add", "Subtract", "Multiply", "Divide", "Inverse of Above", "Transpose of Above" }));

        MatrixParameter2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "..." }));

        ChangeMatrixValue.setText("Edit Matrix");
        ChangeMatrixValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeMatrixValueActionPerformed(evt);
            }
        });

        ViewMatrixBtn.setText("View Matrix");
        ViewMatrixBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewMatrixBtnActionPerformed(evt);
            }
        });

        DeterminantBtn.setText("Find Determinant");
        DeterminantBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeterminantBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Matrix_TabLayout = new javax.swing.GroupLayout(Matrix_Tab);
        Matrix_Tab.setLayout(Matrix_TabLayout);
        Matrix_TabLayout.setHorizontalGroup(
            Matrix_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Matrix_TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Matrix_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DeterminantBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addComponent(MatrixParameter1, 0, 164, Short.MAX_VALUE)
                    .addComponent(Cr8MatrixBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addComponent(MatrixOperator, 0, 164, Short.MAX_VALUE)
                    .addComponent(MatrixParameter2, 0, 164, Short.MAX_VALUE)
                    .addComponent(ChangeMatrixValue, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addComponent(ViewMatrixBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                .addContainerGap())
        );
        Matrix_TabLayout.setVerticalGroup(
            Matrix_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Matrix_TabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Cr8MatrixBtn)
                .addGap(44, 44, 44)
                .addComponent(MatrixParameter1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(MatrixOperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(MatrixParameter2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DeterminantBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(ViewMatrixBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ChangeMatrixValue)
                .addContainerGap())
        );

        Parent_Tab.addTab("MATRIX", null, Matrix_Tab, "Matrix Calculator");

        EqnComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ax+By=C", "Ax+By+Cz=D", "Ax^2+Bx+C=0" }));
        EqnComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EqnComboBoxActionPerformed(evt);
            }
        });

        ValLabel1.setText("Ent A1,A2");

        ValLabel2.setText("Ent B1,B2");

        ValLabel3.setText("Ent C1,C2");

        ValLabel4.setText("Enter -");

        Instruction.setText("Enter values separated by comma");

        javax.swing.GroupLayout Equation_TabLayout = new javax.swing.GroupLayout(Equation_Tab);
        Equation_Tab.setLayout(Equation_TabLayout);
        Equation_TabLayout.setHorizontalGroup(
            Equation_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Equation_TabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Equation_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Equation_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(EqnComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Equation_TabLayout.createSequentialGroup()
                            .addGroup(Equation_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ValLabel2)
                                .addComponent(ValLabel3)
                                .addComponent(ValLabel4)
                                .addComponent(ValLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(Equation_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ValTextField4)
                                .addComponent(ValTextField3)
                                .addComponent(ValTextField2)
                                .addComponent(ValTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))))
                    .addComponent(Instruction))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        Equation_TabLayout.setVerticalGroup(
            Equation_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Equation_TabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(EqnComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(Equation_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ValLabel1)
                    .addComponent(ValTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Equation_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ValLabel2)
                    .addComponent(ValTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Equation_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ValLabel3)
                    .addComponent(ValTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Equation_TabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ValLabel4)
                    .addComponent(ValTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Instruction, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        Parent_Tab.addTab("EQUATIONS", null, Equation_Tab, "Equations Calculator");

        LogArea.setColumns(20);
        LogArea.setFont(new java.awt.Font("Microsoft Tai Le", 3, 12));
        LogArea.setRows(5);
        jScrollPane1.setViewportView(LogArea);

        Display.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        CalculatorLabel.setFont(new java.awt.Font("Monotype Corsiva", 1, 36)); // NOI18N
        CalculatorLabel.setForeground(new java.awt.Color(0, 51, 204));
        CalculatorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CalculatorLabel.setText("MultiFunction~Calc");

        Btn_1.setFont(new java.awt.Font("Times New Roman", 1, 18));
        Btn_1.setText("1");
        Btn_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_1ActionPerformed(evt);
            }
        });

        Btn_2.setFont(new java.awt.Font("Times New Roman", 1, 18));
        Btn_2.setText("2");
        Btn_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_2ActionPerformed(evt);
            }
        });

        Btn_3.setFont(new java.awt.Font("Times New Roman", 1, 18));
        Btn_3.setText("3");
        Btn_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_3ActionPerformed(evt);
            }
        });

        Btn_4.setFont(new java.awt.Font("Times New Roman", 1, 18));
        Btn_4.setText("4");
        Btn_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_4ActionPerformed(evt);
            }
        });

        Btn_5.setFont(new java.awt.Font("Times New Roman", 1, 18));
        Btn_5.setText("5");
        Btn_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_5ActionPerformed(evt);
            }
        });

        Btn_6.setFont(new java.awt.Font("Times New Roman", 1, 18));
        Btn_6.setText("6");
        Btn_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_6ActionPerformed(evt);
            }
        });

        Btn_7.setFont(new java.awt.Font("Times New Roman", 1, 18));
        Btn_7.setText("7");
        Btn_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_7ActionPerformed(evt);
            }
        });

        Btn_8.setFont(new java.awt.Font("Times New Roman", 1, 18));
        Btn_8.setText("8");
        Btn_8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_8ActionPerformed(evt);
            }
        });

        Btn_9.setFont(new java.awt.Font("Times New Roman", 1, 18));
        Btn_9.setText("9");
        Btn_9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_9ActionPerformed(evt);
            }
        });

        Btn_0.setFont(new java.awt.Font("Times New Roman", 1, 18));
        Btn_0.setText("0");
        Btn_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_0ActionPerformed(evt);
            }
        });

        Btn_Ans.setFont(new java.awt.Font("Times New Roman", 1, 18));
        Btn_Ans.setText("=");
        Btn_Ans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_AnsActionPerformed(evt);
            }
        });

        Btn_DecPnt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Btn_DecPnt.setText(".");
        Btn_DecPnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_DecPntActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CommonTabLayout = new javax.swing.GroupLayout(CommonTab);
        CommonTab.setLayout(CommonTabLayout);
        CommonTabLayout.setHorizontalGroup(
            CommonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CommonTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CommonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(CommonTabLayout.createSequentialGroup()
                        .addComponent(Btn_DecPnt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Btn_0, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, CommonTabLayout.createSequentialGroup()
                        .addComponent(Btn_7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Btn_8, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, CommonTabLayout.createSequentialGroup()
                        .addComponent(Btn_1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(Btn_2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, CommonTabLayout.createSequentialGroup()
                        .addComponent(Btn_4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Btn_5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addGroup(CommonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CommonTabLayout.createSequentialGroup()
                        .addGroup(CommonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Btn_3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Btn_6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Btn_9, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(28, Short.MAX_VALUE))
                    .addComponent(Btn_Ans, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)))
        );
        CommonTabLayout.setVerticalGroup(
            CommonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CommonTabLayout.createSequentialGroup()
                .addGroup(CommonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(CommonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(CommonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_7, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_8, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_9, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addGroup(CommonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_0, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Ans, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_DecPnt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        Settings.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        Settings.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        Del_Btn.setFont(new java.awt.Font("Times New Roman", 1, 12));
        Del_Btn.setText("DEL");
        Del_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Del_BtnActionPerformed(evt);
            }
        });

        CE_Btn.setFont(new java.awt.Font("Times New Roman", 1, 12));
        CE_Btn.setText("CE");
        CE_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CE_BtnActionPerformed(evt);
            }
        });

        Clear_Btn.setFont(new java.awt.Font("Times New Roman", 1, 14));
        Clear_Btn.setText("CLEAR");
        Clear_Btn.setToolTipText("Clear Log Area");
        Clear_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clear_BtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Display, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Parent_Tab, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(CommonTab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Settings, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CalculatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Del_Btn)
                        .addGap(18, 18, 18)
                        .addComponent(CE_Btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Clear_Btn))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Settings, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CalculatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Del_Btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Display, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CE_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Clear_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Parent_Tab, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(CommonTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void Btn_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_1ActionPerformed
        //Button one
        Display.setText(Display.getText()+"1"); //Button one write one
    }//GEN-LAST:event_Btn_1ActionPerformed

    private void Btn_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_2ActionPerformed
         Display.setText(Display.getText()+"2"); //Button Two
    }//GEN-LAST:event_Btn_2ActionPerformed

    private void Btn_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_3ActionPerformed
        Display.setText(Display.getText()+"3"); //Button Three
    }//GEN-LAST:event_Btn_3ActionPerformed

    private void Btn_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_4ActionPerformed
        Display.setText(Display.getText()+"4"); //Button four
    }//GEN-LAST:event_Btn_4ActionPerformed

    private void Btn_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_5ActionPerformed
        Display.setText(Display.getText()+"5"); //Button five
    }//GEN-LAST:event_Btn_5ActionPerformed

    private void Btn_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_6ActionPerformed
        Display.setText(Display.getText()+"6"); //Button six
    }//GEN-LAST:event_Btn_6ActionPerformed

    private void Btn_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_7ActionPerformed
        Display.setText(Display.getText()+"7"); //Button seven
    }//GEN-LAST:event_Btn_7ActionPerformed

    private void Btn_8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_8ActionPerformed
        Display.setText(Display.getText()+"8"); //Button eight
    }//GEN-LAST:event_Btn_8ActionPerformed

    private void Btn_9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_9ActionPerformed
        Display.setText(Display.getText()+"9"); //Button nine
    }//GEN-LAST:event_Btn_9ActionPerformed

    private void Btn_DecPntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_DecPntActionPerformed
        char c = '0';
        try{//c stores the last char that was entered
        c = Display.getText().charAt(Display.getText().length()-1);
        }
        catch (Exception ex)
        {}//if it was an operator, then do not allow decimal point to come up
        if (c=='x');else if (c=='+');else if (c == '-');else if (c == '÷' );else if (c=='.');
        else if (c=='(');else if (c==')');else if(Display.getText()==null);
        else Display.setText(Display.getText() + ".");
    }//GEN-LAST:event_Btn_DecPntActionPerformed

    private void Btn_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_0ActionPerformed
        Display.setText(Display.getText()+"0"); //Button zero
    }//GEN-LAST:event_Btn_0ActionPerformed

    private void Divide_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Divide_BtnActionPerformed
          char c = '0';
        try{//c stores the last char that was entered
        c = Display.getText().charAt(Display.getText().length()-1);
        }
        catch (Exception ex)
        {}//if it was an operator then do no allow
        if (c=='x');else if (c=='+');else if (c == '-');else if (c == '÷' );else if (c=='.');
        else if (c=='(');else if(Display.getText()==null);//if entering as the first, then do not allow
        else //only enter the new button if the initial char was not an operator
        Display.setText(Display.getText()+"÷"); //Division button
    }//GEN-LAST:event_Divide_BtnActionPerformed

    private void Plus_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Plus_BtnActionPerformed
        char c = '0';
        try{//this stores the last char that was entered
        c = Display.getText().charAt(Display.getText().length()-1);
        }
        catch (Exception ex)
        {}//check if last char was an operator
        if (c=='x');else if (c=='+');else if (c == '-');else if (c == '÷' );else if (c=='.');
        else if (c=='(');else if(Display.getText()==null);
        else //only enter the new button if the initial char was not an operator
        Display.setText(Display.getText()+"+");//plus button
    }//GEN-LAST:event_Plus_BtnActionPerformed

    private void Minus_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Minus_BtnActionPerformed
        char c = '0';
        try{//c stores the last char that was entered
        c = Display.getText().charAt(Display.getText().length()-1);
        }
        catch (Exception ex)
        {}
        if (c=='x');else if (c=='+');else if (c == '-');else if (c == '÷' );else if (c=='.');
        else if (c=='(');else if(Display.getText()==null);
        else //only enter the new button if the initial char was not an operator
        Display.setText(Display.getText()+"-");//minus button
    }//GEN-LAST:event_Minus_BtnActionPerformed

    private void Multiply_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Multiply_BtnActionPerformed
        // TODO add your handling code here:
        char c = '0';
        try{//this stores the last char that was entered
        c = Display.getText().charAt(Display.getText().length()-1);
        }
        catch (Exception ex)
        {}
        if (c=='x');else if (c=='+');else if (c == '-');else if (c == '÷' );else if (c=='.');
        else if (c=='(');else if(Display.getText()==null);
        else //only enter the new button if the initial char was not an operator
        Display.setText(Display.getText()+"x");//multiplication button
    }//GEN-LAST:event_Multiply_BtnActionPerformed

    private void Bracket_minus_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bracket_minus_BtnActionPerformed
        Display.setText(Display.getText()+"(-");//minus with bracket
    }//GEN-LAST:event_Bracket_minus_BtnActionPerformed

    private void CE_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CE_BtnActionPerformed
        Display.setText(null);//clear display screen
    }//GEN-LAST:event_CE_BtnActionPerformed

    private void Clear_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clear_BtnActionPerformed
        LogArea.setText("LOG:");//clear the log area
    }//GEN-LAST:event_Clear_BtnActionPerformed

    private void Del_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Del_BtnActionPerformed
        try {
            if (Display.getText().length()>1){//make sure more than one char presently
        for (int i = 0;i<matches.length;i++)//strings that could be in calculator and need to move together
        if(Display.getText().endsWith(matches[i]))//if matches one of them
        {
            int j = matches[i].length();//store the length of the string
            Display.setText(Display.getText(0,Display.getText().length()-j));//reset display removing that part
            i=matches.length+1;//once get something, leave the loop with i one above length
        }
        else if(i==matches.length-1){//once it has finished the loop and nothing then come here
            Display.setText(Display.getText(0, Display.getText().length()-1));//else remove only the last char
            i=matches.length;          }
            }
            else Display.setText(null);//if length is less than or equal to one then just set display to null
            } catch (BadLocationException ex) {
            //used try incase 
        }
 
    }//GEN-LAST:event_Del_BtnActionPerformed

    
    private void Parent_TabStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_Parent_TabStateChanged
        //this function checks when a the tabbed pane has a new panel selected
        Display.setText(null);//clear the Display
        Btn_DecPnt.setEnabled(true);//enable dec point
        LogArea.setText("LOG:");//clear log area
        if(Parent_Tab.getSelectedComponent()==Base_Converter)
        {//if in base converter
            keyboardSetting2();//this did not work as only the first setting in can work because it was put first
            Btn_DecPnt.setEnabled(false);//disable decimal point as not to be used
        }  
    }//GEN-LAST:event_Parent_TabStateChanged

    private void Opn_BracketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Opn_BracketActionPerformed
        //code for open bracket
        char c = '0';
        try{//this stores the last char that was entered
        c = Display.getText().charAt(Display.getText().length()-1);}
        catch (Exception ex)
        {}
        if (c=='.');//make sure prior to it is not a dot
        else 
        Display.setText(Display.getText()+"(");//open bracket
    }//GEN-LAST:event_Opn_BracketActionPerformed

    private void Cls_BracketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cls_BracketActionPerformed
        //code for close bracket
        int opnBrackets = 0; //count number of open brackets
        int clsBrackets = 0; //count number of close brackets
        for (int i =0; i<Display.getText().length(); i++){
            if (Display.getText().charAt(i)=='(')opnBrackets++;
            else if (Display.getText().charAt(i)==')')clsBrackets++;
        }
        char c = '0';
        try{//this stores the last char that was entered
        c = Display.getText().charAt(Display.getText().length()-1);
        }
        catch (Exception ex)
        {}
        if (c=='x');else if (c=='+');else if (c == '-');else if (c == '÷' );else if (c=='.');
        else if (c=='('); //shouldnt be an empty bracket
        else if(clsBrackets>=opnBrackets);//if the close bracket has no related open then do not enter
        else
            Display.setText(Display.getText()+")");//open bracket
    }//GEN-LAST:event_Cls_BracketActionPerformed

    private void PowerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PowerBtnActionPerformed
        //power button codes
        char c = '0';
        try{//c stores the last char that was entered
        c = Display.getText().charAt(Display.getText().length()-1);
        }
        catch (Exception ex)
        {}
        if (c=='x');else if (c=='+');else if (c == '-');else if (c == '÷' );else if (c=='.');
        else if (c=='(');else if(Display.getText()==null);
        else //only enter the new button if the initial char was not an operator
            Display.setText(Display.getText()+"^(");//power button
    }//GEN-LAST:event_PowerBtnActionPerformed

    private void RootBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RootBtnActionPerformed
        //root button codes
        char c = '0';
        try{//c stores the last char that was entered
        c = Display.getText().charAt(Display.getText().length()-1);
        }
        catch (Exception ex)
        {}
        if (c=='x');else if (c=='+');else if (c == '-');else if (c == '÷' );else if (c=='.');
        else if (c=='(');else if(c==')');else if(Display.getText()==null);
        else //only enter the new button if the initial char was not an operator
        Display.setText(Display.getText()+"√(");//Root button
    }//GEN-LAST:event_RootBtnActionPerformed

    private void Btn_AnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_AnsActionPerformed
        //equal button, main deal
        if (Parent_Tab.getSelectedComponent()==StandardTab)//if in standard tab
        {//if in standard calculator tab
            try {
                Analyzer();//first analyze and store the string in an array of numbers and operators
                BracketSolver(0,AnalyzedContent);//then solve all brackets
                Calculator_Basic_Extra(AnalyzedContent);//then calculate stuffs like sin, power cos
                Calculator_Basic(AnalyzedContent,0,AnalyzedContent.size());//perform calculation starting from 0 till end
                Float ans = Float.parseFloat(AnalyzedContent.get(0));//to check ans is valid sort of by convertin to float
                LogArea.append("\nANS:\t"+ComplexClass.roundOff(ans));//paste rounded off solution on log area
            }
            catch(ArithmeticException e){JOptionPane.showMessageDialog(CommonTab, e.getMessage());}
            //catch the divide by zero exception, Illegal argument, as well as bracket and other syntax errors
            catch(IllegalArgumentException e){JOptionPane.showMessageDialog(CommonTab, e.getMessage());}
            catch(Exception e){JOptionPane.showMessageDialog(CommonTab, "Syntax Error!!!");}
             }
            else if (Parent_Tab.getSelectedComponent()==Base_Converter)//If in Base converting tab
            {//if in base converting tab
            try{
                int from, to;
                if(FromBase.getSelectedIndex()==9)from = 16;//index 9 is base 16
                else from = FromBase.getSelectedIndex()+2; //index 0 is for base two therefore 0+2 and so on for others
                if(ToBase.getSelectedIndex()==9)to = 16;//index 9 is base 16
                else to = ToBase.getSelectedIndex()+2; //index 0 is for base two therefore 0+2 and so on for others
                BaseConvertingFunc(from, to);//perform conversion from function
            }
            catch (IllegalArgumentException e){JOptionPane.showMessageDialog(CommonTab, e.getMessage());}
            catch (Exception e){JOptionPane.showMessageDialog(CommonTab, "Syntax Error!!!");}
            }
            else if(Parent_Tab.getSelectedComponent()==Complex_Tab)
            {try{//if in complex tab
                if((Display.getText().startsWith("A"))||(Display.getText().startsWith("R")))
                {//if its a conversion tool and not calculation
                    if(Display.getText().startsWith("Abs"))
                    {//if to get absolute value
                        String str = Display.getText().substring(4);//store the string from after ABS(
                        ComplexClass temp  = ComplexClass.toComplex(str);//change string to complex number
                        LogArea.append("\nANS:  "+temp.getAbs());//get the absolute value and append
                    }
                    else if(Display.getText().startsWith("R<Ө"))
                    {//convert to R<0 format
                        String text = Display.getText().substring(4);//store string after R<0(
                        ComplexClass temp = ComplexClass.toComplex(text);//convert text to complex
                        LogArea.append("\nANS:  "+ComplexClass.DisplayPolar(temp));//display in polar form
                    }
                    else if(Display.getText().startsWith("A+Bi"))
                    {//convert to A+Bi format
                        String text = Display.getText().substring(5);
                        ComplexClass temp = ComplexClass.toComplex(text);//convert user input to complex number
                        LogArea.append("\nANS:  "+ComplexClass.DisplayCartesian(temp));//append to log area the cartesian val
                    }
                    else if(Display.getText().startsWith("Arg"))
                    {//if its to get the argument, i.e angle
                        String str = Display.getText().substring(4);//store the string from after ARG(
                        ComplexClass temp  = ComplexClass.toComplex(str);//change string to complex number
                        LogArea.append("\nANS:  "+temp.getArg());//get the argument value and append
                    }
                }
                else//else then its a normal complex arithmetic operation so solve
                {
                    String ans = ComplexClass.ComplexCalc(Display.getText());
                    LogArea.append("\nANS:  "+ans);
                }
            }catch(ArithmeticException e){JOptionPane.showMessageDialog(CommonTab, e.getMessage());}
            catch(Exception e){JOptionPane.showMessageDialog(CommonTab, "Syntax Error");}
            }
        else if(Parent_Tab.getSelectedComponent()==Matrix_Tab)
        {
            try {
            //if in matrix tab
                if (MatrixParameter1.getSelectedIndex()==0)throw new Exception("Select a first matrix");
                //first check if parameter 1 has been selected
                int parameter1 = MatrixParameter1.getSelectedIndex()-1;
                int parameter2 = MatrixParameter2.getSelectedIndex()-1;
                int operator = MatrixOperator.getSelectedIndex();
                if(operator==0)//addition selected
                {//first check if parameter 2 has been selected
                    if (MatrixParameter2.getSelectedIndex()==0)throw new Exception("Select a second matrix");
                    objMatrices[count]=MatrixClass.addMatrix(objMatrices[parameter1],objMatrices[parameter2]);
                }
                else if (operator == 1) {//subtraction selected
                    if (MatrixParameter2.getSelectedIndex()==0)throw new Exception("Select a second matrix");
                    objMatrices[count] = MatrixClass.minusMatrix(objMatrices[parameter1], objMatrices[parameter2]);
                 }
                else if (operator == 2) {//multiplication selected
                    if (MatrixParameter2.getSelectedIndex()==0)throw new Exception("Select a second matrix");
                    objMatrices[count] = MatrixClass.multiplyMatrix(objMatrices[parameter1], objMatrices[parameter2]);
                 }//division selected
                else if (operator == 3) {if (MatrixParameter2.getSelectedIndex()==0)throw new Exception("Select a second matrix");
                    objMatrices[count] = MatrixClass.divideMatrix(objMatrices[parameter1], objMatrices[parameter2]);
                    }//inverse selected
                else if (operator == 4) {//no need to check for parameter 2 since not needed
                    objMatrices[count] = MatrixClass.inverseMatrix(objMatrices[parameter1]);
                }
                else if (operator == 5) {//transpose selected,.. no need for parameter 2
                    objMatrices[count] = MatrixClass.transposeMatrix(objMatrices[parameter1]);
                }
                if(!ansExist){//if ansExists no need to add answer to combobo again but if not
                    MatrixParameter1.addItem(objMatrices[count].Matname);//store it in the combobox1
                    MatrixParameter2.addItem(objMatrices[count].Matname);
                }//store it in the combobox2
                LogArea.setText(MatrixClass.displayMatrix(objMatrices[count]));
                ansExist = true;//if answer has been put in combobox, monitor with this
            }catch(Exception e){JOptionPane.showMessageDialog(CommonTab, e.getMessage());}
        }
        else if (Parent_Tab.getSelectedComponent() == Equation_Tab)
        {//for equation tab
            try{
                if(EqnComboBox.getSelectedIndex()==2)
                {//if ax^2+bx+c=0
                    float a,b,c;
                    a=Float.parseFloat(ValTextField1.getText());
                    b=Float.parseFloat(ValTextField2.getText());
                    c=Float.parseFloat(ValTextField3.getText());
                    String ans = EqnClass.Eqn3Solver(a, b, c);
                    LogArea.setText("LOG:\nANS:\n"+ans);
                }
                else if(EqnComboBox.getSelectedIndex()==1)
                {//if ax+by+cz=d
                    float a1,a2,a3,b1,b2,b3,c1,c2,c3,d1,d2,d3;//the variables
                    //the comma positions, there are two commas per text field expected
                    int aCommaPos1, aCommaPos2,bCommaPos1, bCommaPos2,cCommaPos1, cCommaPos2,dCommaPos1, dCommaPos2;
                    aCommaPos1 = ValTextField1.getText().indexOf(',');aCommaPos2 = ValTextField1.getText().lastIndexOf(',');
                    bCommaPos1 = ValTextField2.getText().indexOf(',');bCommaPos2 = ValTextField2.getText().lastIndexOf(',');
                    cCommaPos1 = ValTextField3.getText().indexOf(',');cCommaPos2 = ValTextField3.getText().lastIndexOf(',');
                    dCommaPos1 = ValTextField4.getText().indexOf(',');dCommaPos2 = ValTextField4.getText().lastIndexOf(',');
                    a1 = Float.parseFloat(ValTextField1.getText().substring(0, aCommaPos1));//store from a1 to d3 using commas
                    a2 = Float.parseFloat(ValTextField1.getText().substring(aCommaPos1+1, aCommaPos2));
                    a3 = Float.parseFloat(ValTextField1.getText().substring(aCommaPos2+1));
                    b1 = Float.parseFloat(ValTextField2.getText().substring(0, bCommaPos1));
                    b2 = Float.parseFloat(ValTextField2.getText().substring(bCommaPos1+1, bCommaPos2));
                    b3 = Float.parseFloat(ValTextField2.getText().substring(bCommaPos2+1));
                    c1 = Float.parseFloat(ValTextField3.getText().substring(0, cCommaPos1));
                    c2 = Float.parseFloat(ValTextField3.getText().substring(cCommaPos1+1, cCommaPos2));
                    c3 = Float.parseFloat(ValTextField3.getText().substring(cCommaPos2+1));
                    d1 = Float.parseFloat(ValTextField4.getText().substring(0, dCommaPos1));
                    d2 = Float.parseFloat(ValTextField4.getText().substring(dCommaPos1+1, dCommaPos2));
                    d3 = Float.parseFloat(ValTextField4.getText().substring(dCommaPos2+1));
                    String ans = EqnClass.Eqn2Solver(a1, a2, a3, b1, b2, b3, c1, c2, c3, d1, d2, d3);
                    LogArea.setText("LOG:\nANS:\n"+ans);
                }
                else if(EqnComboBox.getSelectedIndex()==0)
                {//if ax+by=c
                    float a1,a2,b1,b2,c1,c2;//the variables
                    int aComma,bComma,cComma;//to store the comma positions
                    aComma = ValTextField1.getText().indexOf(',');
                    bComma = ValTextField2.getText().indexOf(',');
                    cComma = ValTextField3.getText().indexOf(',');
                    a1 = Float.parseFloat(ValTextField1.getText().substring(0, aComma));//store a1 down to c2 using comma to separate
                    a2 = Float.parseFloat(ValTextField1.getText().substring(aComma+1));
                    b1 = Float.parseFloat(ValTextField2.getText().substring(0, bComma));
                    b2 = Float.parseFloat(ValTextField2.getText().substring(bComma+1));
                    c1 = Float.parseFloat(ValTextField3.getText().substring(0, cComma));
                    c2 = Float.parseFloat(ValTextField3.getText().substring(cComma+1));
                    String ans = EqnClass.Eqn1Solver(a1, a2, b1, b2, c1, c2);//solve and get ans in string
                    LogArea.setText("LOG:\nANS:\n"+ans);//paste on log
                }
            }
            catch(Exception e){JOptionPane.showMessageDialog(CommonTab, "Syntax Error");}
        }
    }//GEN-LAST:event_Btn_AnsActionPerformed

    private void Btn_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_AActionPerformed
        Display.setText(Display.getText()+"A");//button A in base conversion tab
    }//GEN-LAST:event_Btn_AActionPerformed

    private void Btn_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_BActionPerformed
        Display.setText(Display.getText()+"B");//button B in base conversion tab
    }//GEN-LAST:event_Btn_BActionPerformed

    private void Btn_CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_CActionPerformed
        Display.setText(Display.getText()+"C");//button c in base
    }//GEN-LAST:event_Btn_CActionPerformed

    private void Btn_DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_DActionPerformed
        Display.setText(Display.getText()+"D");//button d in base conversion
    }//GEN-LAST:event_Btn_DActionPerformed

    private void Btn_EActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_EActionPerformed
        Display.setText(Display.getText()+"E");//button e in base conversion
    }//GEN-LAST:event_Btn_EActionPerformed

    private void Btn_FActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_FActionPerformed
        Display.setText(Display.getText()+"F");//button f in base conversion tab
    }//GEN-LAST:event_Btn_FActionPerformed

    private void ComplexOpComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComplexOpComboActionPerformed
        // display texts as required for the combobox values
        switch(ComplexOpCombo.getSelectedIndex())
        {
            case 1:Display.setText("Abs(");ComplexOpCombo.setSelectedIndex(0);
            return;//display Abs( and reset combobox to null
            case 2:Display.setText("Arg(");ComplexOpCombo.setSelectedIndex(0);
            return;//display instruction and reset combobox to null
            case 3:Display.setText("R<Ө(");ComplexOpCombo.setSelectedIndex(0);
            return;//display instruction and reset combobox to null
            case 4:Display.setText("A+Bi(");ComplexOpCombo.setSelectedIndex(0);
            return;//display instruction and reset combobox to null
        }
    }//GEN-LAST:event_ComplexOpComboActionPerformed

    private void Plus_Btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Plus_Btn1ActionPerformed
        Plus_BtnActionPerformed(evt);//this plus button is in complex tab and calls the other plus button
    }//GEN-LAST:event_Plus_Btn1ActionPerformed

    private void Minus_Btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Minus_Btn1ActionPerformed
        Display.setText(Display.getText()+"-");//this minus in in complex tab
    }//GEN-LAST:event_Minus_Btn1ActionPerformed

    private void Multiply_Btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Multiply_Btn1ActionPerformed
        Multiply_BtnActionPerformed(evt);//this button is in complex and calls the previously defined multiply button
    }//GEN-LAST:event_Multiply_Btn1ActionPerformed

    private void Divide_Btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Divide_Btn1ActionPerformed
        Divide_BtnActionPerformed(evt);//found in complex tab and calls previously defined divide button function
    }//GEN-LAST:event_Divide_Btn1ActionPerformed

    private void FunctionsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FunctionsComboBoxActionPerformed
        //when a choice is chosen from functions sin cos etc
        if(FunctionsComboBox.getSelectedIndex()>0){//if the first one which is empty is not chosen
            Display.setText(Display.getText()+FunctionsComboBox.getSelectedItem().toString()+"(");
            //add the function to display text.
            FunctionsComboBox.setSelectedIndex(0);//go back to empty//
        }
    }//GEN-LAST:event_FunctionsComboBoxActionPerformed

    private void PolarSignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PolarSignBtnActionPerformed
        // polar complex number sign <
        Display.setText(Display.getText()+"<");
    }//GEN-LAST:event_PolarSignBtnActionPerformed

    private void Button_IActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_IActionPerformed
        // i in complex numbers
        Display.setText(Display.getText()+"i");
    }//GEN-LAST:event_Button_IActionPerformed
private static MatrixClass[] objMatrices= new MatrixClass[6]; //to statically store all matrices, 5+ ans=6
private static int count=0;//to count the array of matrices
private static boolean ansExist = false;//if the array already contains an answer matrix
    private void Cr8MatrixBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cr8MatrixBtnActionPerformed
        // TO create a new matrix and store and list on the comboboxes
        final int m,n;
        try{
        //ask user to enter value for m and n
            if(count>=5)throw new IllegalArgumentException("Maximum Five Matrixes can be created");
            //if five already created then throw exception as array can only carry five plus matAns = six
            m=Integer.parseInt(JOptionPane.showInputDialog("Enter Number of Rows"));
            if(m<=0)throw new IllegalArgumentException("Matrix Cannot have less than 1 Row");
            if(m>30)throw new IllegalArgumentException("The Program is limited to maximum 30 rows");
            n=Integer.parseInt(JOptionPane.showInputDialog("Enter Number of Columns"));
            if(n<=0)throw new IllegalArgumentException("Matrix Cannot have less than 1 Row or Column");
            if(n>30)throw new IllegalArgumentException("The Program is limited to maximum 30 columns");
            Thread Cr8Matrix = new Thread()
            {
            @Override
            public void run()
            {
                MatrixEntry Cr8MatrixFrame = new MatrixEntry(m,n);
                while(MatrixEntry.done){}//remain in thread till its done
            }
            };
            Cr8Matrix.start();Cr8Matrix.join();//start the thread and wait till done before storing
            //if(MatrixEntry.stored_data==true){//if done is true then its complete so store
            objMatrices[count] = MatrixClass.MatrixCreator(m, n, MatrixEntry.data);//store the matrix created
            count++;
            if(ansExist){//if the combobox already contains matrix for answer
                MatrixParameter1.removeItemAt(count);//remove it before adding this one
                MatrixParameter2.removeItemAt(count);ansExist = false;}
            MatrixParameter1.addItem(objMatrices[count-1].Matname);//add the name to combo list1
            MatrixParameter2.addItem(objMatrices[count-1].Matname);//add the name to combo list2
            }
            catch(IllegalArgumentException e){JOptionPane.showMessageDialog(CommonTab, e.getMessage());}
            catch(Exception e){JOptionPane.showMessageDialog(CommonTab, "Value Entered Invalid\n Restart Creation");}
    }//GEN-LAST:event_Cr8MatrixBtnActionPerformed

    private void MatrixParameter1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MatrixParameter1ActionPerformed
        //once user selects a matrix, the button for edit and det textd are changed to correspond to the matrix
            ChangeMatrixValue.setText("Change "+MatrixParameter1.getSelectedItem().toString());
            DeterminantBtn.setText("Find Det "+MatrixParameter1.getSelectedItem().toString());
    }//GEN-LAST:event_MatrixParameter1ActionPerformed
    private static int rowEdit, colEdit;//to statically store row and column during edit operation because of thread
    private void ChangeMatrixValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeMatrixValueActionPerformed
        try{// TO edit matrix
            if(MatrixParameter1.getSelectedIndex()>0){
                final int position=MatrixParameter1.getSelectedIndex();
                final int edit = JOptionPane.showConfirmDialog(CommonTab, "Do you want to Change"
                    + " row and column size???",
                    null, JOptionPane.YES_NO_OPTION);
                if(edit==JOptionPane.YES_OPTION)
                {//cannot put an option pane in a thread.. dont know why
                    rowEdit=Integer.parseInt(JOptionPane.showInputDialog("Enter Number of Rows"));
                    if(rowEdit<=0)throw new IllegalArgumentException("Matrix Cannot have less than 1 Row");
                    if(rowEdit>30)throw new IllegalArgumentException("The Program is limited to maximum 30 rows");
                    colEdit=Integer.parseInt(JOptionPane.showInputDialog("Enter Number of Columns"));
                    if(colEdit<=0)throw new IllegalArgumentException("Matrix Cannot have less than 1 Colummn");
                    if(colEdit>30)throw new IllegalArgumentException("The Program is limited to maximum 30 columns");
                }
                Thread editMat = new Thread(){
                @Override
                public void run(){
                    if(edit==JOptionPane.YES_OPTION)
                    {
                        MatrixEntry NewMat = new MatrixEntry(rowEdit,colEdit);
                    }
                    else{
                        rowEdit=objMatrices[position-1].getRow();
                        colEdit=objMatrices[position-1].getColumn();
                        MatrixEntry EditMat = new MatrixEntry(rowEdit,colEdit);
                        for (int i=0;i<rowEdit;i++)
                            for (int j=0;j<colEdit;j++)
                                EditMat.MatrixInput[i][j].setText(""
                                    +MatrixClass.getMatrix(objMatrices[position-1])[i][j]);
                    }while(MatrixEntry.done){}//wait here till its done
                    }};
                    editMat.start();editMat.join();
                MatrixClass.MatrixContentChanger(objMatrices[position-1], MatrixEntry.data, rowEdit, colEdit);//call matrix changer, which changes it
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(CommonTab, "Value Entered Invalid\n Restart Creation");
            }
            catch(Exception e){JOptionPane.showMessageDialog(CommonTab, e.getMessage());
            }
    }//GEN-LAST:event_ChangeMatrixValueActionPerformed

    private void ViewMatrixBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewMatrixBtnActionPerformed
        if(MatrixParameter1.getSelectedIndex()>0)
           LogArea.setText(MatrixClass.displayMatrix(objMatrices[MatrixParameter1.getSelectedIndex()-1]));
    }//GEN-LAST:event_ViewMatrixBtnActionPerformed

    private void EqnComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EqnComboBoxActionPerformed
        // Once a choice in Combobox is selected
        if(EqnComboBox.getSelectedIndex()==0)
        {//if Anx + BnY = C is selected, set the labels to correspond with required inputs
            ValLabel1.setText("Ent A1,A2");ValLabel2.setText("Ent B1,B2");
            ValLabel3.setText("Ent C1,C2");ValLabel4.setText("Enter -");
        }
        else if(EqnComboBox.getSelectedIndex() == 1)
        {//if Anx + Bny + Cnz = D then set to correspond
            ValLabel1.setText("Ent A1,A2,A3");ValLabel2.setText("Ent B1,B2,B3");
            ValLabel3.setText("Ent C1,C2,C3");ValLabel4.setText("Ent D1,D2,D3");
        }
        else if(EqnComboBox.getSelectedIndex() == 2)
        {//else if ax^2 + bx + c =0
            ValLabel1.setText("Enter A");ValLabel2.setText("Enter B");
            ValLabel3.setText("Enter C");ValLabel4.setText("Enter -");
        }
    }//GEN-LAST:event_EqnComboBoxActionPerformed

    private void DeterminantBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeterminantBtnActionPerformed
        if(MatrixParameter1.getSelectedIndex()>0){//as long as the 0 position which is empty is not the selected one
            int position=MatrixParameter1.getSelectedIndex();
            float Det = MatrixClass.detMatrix(MatrixClass.getMatrix(objMatrices[position-1]));
            //store the determinant of the matrix data into Det
            LogArea.append("\nDET:\t"+ComplexClass.roundOff(Det));//append rounded off value
        }
    }//GEN-LAST:event_DeterminantBtnActionPerformed
private static ArrayList<String> AnalyzedContent;//to store the user input in standard tab as an array of parameters and operators and functions
    private void Analyzer()//function that analyzes the user input char by char and takes the numbers
    {//used string builder so can append to string
        StringBuilder DisplayContent = new StringBuilder(Display.getText());
        int opnBrackets = 0; //count number of open brackets
        int clsBrackets = 0; //count number of close brackets
        for (int i =0; i<DisplayContent.length(); i++){
            if (DisplayContent.charAt(i)=='(')opnBrackets++;//count the brackets open or closed
            else if (DisplayContent.charAt(i)==')')clsBrackets++;
        }//if the number of open brackets is not equal that of close then throw error
        if(clsBrackets!=opnBrackets)throw new IllegalArgumentException("Syntax Error: Bracket Not Closed");
        AnalyzedContent = new ArrayList();//to store everything
        char[] operators = {'+','-','x','÷','^','r','(',')'};//array holding all operators
        String set = "";//string to hold the numbers
        for (int i=0;i<DisplayContent.length();i++)//for all chars in display
        {//if its an operator
            if(Display.getText().charAt(i)=='√')DisplayContent.setCharAt(i, 'r');//change the root sign to r
            if((DisplayContent.charAt(i)==operators[0])||(DisplayContent.charAt(i)==operators[1])||(DisplayContent.charAt(i)==operators[2])
            ||(DisplayContent.charAt(i)==operators[3])||(DisplayContent.charAt(i)==operators[4])||(DisplayContent.charAt(i)==operators[5])
            ||(DisplayContent.charAt(i)==operators[6])||(DisplayContent.charAt(i)==operators[7]))
             {//if an operator is met, then
                if (!set.equals(""))
                {
                    AnalyzedContent.add(set);//check if set is not empty then store its content
                    }
                    set = "";//reset the set
                    for (int j = 0; j<operators.length;j++){//check which operator it is and store
                        if (DisplayContent.charAt(i)==operators[j])
                        {
                            if((i==0)&&(j!=6))throw new ArithmeticException("Syntax Error::Cannot Begin with Operator");
                            //if it is start of the display and operator is not open bracket then throw error
                            AnalyzedContent.add(operators[j] + "");
                        }
                    }
                }
                else//else if its a number append to set which might already contain numbers not separated by an operator
                {
                   set = set + DisplayContent.charAt(i);//append the number to previous
                }
        }
       if (!set.equals(""))AnalyzedContent.add(set);//check if final set is not empty then store its content
    }
    private void Calculator_Basic(ArrayList Analyzed, int _Start, int _End)//function that takes in the an array of content and does + - x and ÷
    {//first do all division then multiplication then Addition then subtraction BODMAS
        int i;
        for(i=_Start;i<_End;i++)
        {
            if (Analyzed.get(i).equals("÷"))//check through for Division
            {
                if (Analyzed.get(i+1).equals("0"))throw new ArithmeticException("Maths Error!!!");
                double divide = Double.parseDouble(Analyzed.get(i-1).toString())/Double.parseDouble(Analyzed.get(i+1).toString());
                Analyzed.set(i, String.valueOf(divide));//replace the sign with the solution of the arithmetic
                Analyzed.remove(i + 1);
                Analyzed.remove(i - 1);//remove the two numbers that were calculated from array
                //Note: remove the one after first because removing the one before would disbalance positions
                _End-=2;//reduce the end point by two since removed two
                i=_Start;//restart again if something was done
            }
        }
        for ( i=_Start; i<_End; i++)//check through for multiplication
        {
            if (Analyzed.get(i).equals("x"))
            {
                double product = Double.parseDouble(Analyzed.get(i-1).toString())*Double.parseDouble(Analyzed.get(i+1).toString());
                Analyzed.set(i, String.valueOf(product));//replace the sign with the solution of the arithmetic
                Analyzed.remove(i + 1);Analyzed.remove(i - 1);//remove the two numbers that were calculated from array
                //Note: remove the one after first because removing the one before would disbalance positions
                i=_Start;//restart again if something was done
               _End-=2;//reduce the end point by two since removed two
            }
        }
          for ( i=_Start; i<_End; i++)//check through for plus
        {
            if (Analyzed.get(i).equals("+"))
            {
                double sum = Double.parseDouble(Analyzed.get(i-1).toString())+Double.parseDouble(Analyzed.get(i+1).toString());
                Analyzed.set(i, String.valueOf(sum));//replace the sign with the solution of the arithmetic
                Analyzed.remove(i + 1);Analyzed.remove(i - 1);//remove the two numbers that were calculated from array
                //Note: remove the one after first because removing the one before would disbalance positions
                i=_Start;//restart again if something was done
               _End-=2;//reduce the end point by two since removed two
            }
        }
          for ( i=_Start; i<_End; i++)//check through for subtraction
        {
            if (Analyzed.get(i).equals("-"))
            {
                double diff = Double.parseDouble(Analyzed.get(i-1).toString())-Double.parseDouble(Analyzed.get(i+1).toString());
                Analyzed.set(i, String.valueOf(diff));//replace the sign with the solution of the arithmetic
                Analyzed.remove(i+1);Analyzed.remove(i-1);//remove the two numbers that were calculated from array
               //Note: remove the one after first because removing the one before would disbalance positions
               _End-=2;//reduce the end point by two since removed two
               i=_Start;//restart again if something was done
            }
        }
    }
    private void BracketSolver(int opnBracketPosition, ArrayList Analyzed)
    {//to solve brackets
        for (int i=opnBracketPosition;i<Analyzed.size();i++)//check all array element
        {
            if (Analyzed.get(i).equals("("))//if its an open bracket
            {
                if(Analyzed.get(i+1).equals("-")){//if a minus after the bracket, then turn the number after the minus to a negative and delete the minus
                 Analyzed.set(i+2,String.valueOf((-1)*Double.parseDouble(Analyzed.get(i+2).toString())));
                 Analyzed.remove(i+1);}else;
                for (int j=i+1;j<Analyzed.size();j++){//check all element after the open bracket
                    if(Analyzed.get(j).equals("("))
                    {
                        BracketSolver(j, Analyzed);//i=0;
                    }//if we meet another open bracket, then restart the function from there
                    else if(Analyzed.get(j).equals(")"))//but if its a closing
                    {
                        if(j<Analyzed.size()-1){//if there is still a text after the close bracket
                            if ((Analyzed.get(j+1).equals("+"))||(Analyzed.get(j+1).equals("-"))
                                ||(Analyzed.get(j+1).equals("x"))||(Analyzed.get(j+1).equals("^"))
                                ||(Analyzed.get(j+1).equals("÷"))||(Analyzed.get(j+1).equals("r"))){
                                //and the character next to it is an operator
                                System.out.println("A");
                                Analyzed.remove(j);//remove the close bracket
                            }
                            else Analyzed.set(j, "x");//else set the close bracket to a multiply sign
                        }
                        else if(j==Analyzed.size()-1) Analyzed.remove(j);//if its the last thing then just delete the bracket;
                        if(i!=0){//make sure is not zero to prevent error of i-1=-1
                            if((Analyzed.get(i-1).equals("+"))||(Analyzed.get(i-1).equals("-"))
                                ||(Analyzed.get(i-1).equals("x"))||(Analyzed.get(i-1).equals("^"))
                                ||(Analyzed.get(i-1).equals("÷"))||(Analyzed.get(i-1).equals("r"))) {
                                //if an operator is before the bracket then just delete the brackets and calculate
                                Analyzed.remove(i);//remove the brackets
                                Calculator_Basic(Analyzed, i, j-1);
                                i=0;j=Analyzed.size();
                                //solve for all after the open bracket n before the close
                            }
                            else{//if not an operator
                                Analyzed.set(i,String.valueOf('x'));
                                //change the open bracket to multiply
                                Calculator_Basic(Analyzed, i+1, j-1);//solve for all after the open bracket n before the close
                            }
                        }else{
                            Analyzed.remove(i);//remove the open brackets
                            Calculator_Basic(Analyzed, i, j-1);//solve for all after the open bracket n before the close
                        }
                        i=0;j=Analyzed.size();//restart
                    }
               }
            }
        }  
    }
    private void Calculator_Basic_Extra(ArrayList Analyzed)
    {//to perform other functions like root, power, sin
        for (int i=0; i<Analyzed.size();i++)
        {
            if (Analyzed.get(i).toString().equals("^"))
            {
                double x = Double.parseDouble(Analyzed.get(i-1)+"");
                double y = Double.parseDouble(Analyzed.get(i+1)+"");
                Analyzed.set(i, String.valueOf(Math.pow(x, y)));//store the solution into the position of the operator
                Analyzed.remove(i+1);Analyzed.remove(i-1);//remove the arguments already worked from the array
            }
            else if(Analyzed.get(i).toString().equals("r"))//r which has replaced root sign
            {double x = 1/Double.parseDouble(Analyzed.get(i-1)+"");//2√16 is converted to 16^(1/2)
                double y = Double.parseDouble(Analyzed.get(i+1)+"");
                Analyzed.set(i, String.valueOf(Math.pow(y, x)));//store the solution into the position of the operator
                Analyzed.remove(i+1);Analyzed.remove(i-1);//remove the arguments already worked from the array
                }
            else for(int j=0;j<matches.length;j++)//to check other operators like sin cos etc
                if(Analyzed.get(i).toString().equalsIgnoreCase(matches[j]))//if it matches any of them
                {
                    Analyzed.remove(i+1);//remove the operator after the sign which most likely is an open bracket
                    double val = Double.parseDouble(Analyzed.get(i+1).toString());
                    //switch(j)cannot use switch because return would leave the whole loop and no return would run all cases
                    if(j==6){//if sin
                        Analyzed.set(i, String.valueOf(Math.sin(Math.toRadians(val))));
                        Analyzed.remove(i+1);//solve sin and remove the number worked on
                        j=matches.length;//leave the for loop
                    }
                    else if(j == 7)
                    {//if cosine
                        Analyzed.set(i, String.valueOf(Math.cos(Math.toRadians(val))));
                        Analyzed.remove(i+1);//solve cos and remove the number worked on
                        j=matches.length;//leave the for loop
                    }
                    else if(j == 8)
                    {//if tangent
                        Analyzed.set(i, String.valueOf(Math.tan(Math.toRadians(val))));
                        Analyzed.remove(i+1);//solve tan and remove the number worked on
                        j=matches.length;//leave entire loop
                    }
                    else if(j == 9)
                    {//if log, if the parameter is zero then log zero is math error
                        if(val==0)throw new ArithmeticException("Log Zero is Math ERROR");
                        Analyzed.set(i, String.valueOf(Math.log(val)));
                        Analyzed.remove(i+1);//solve ehm log and remove parameter worked on
                        j=matches.length;//leave loop
                     }
                    else if(j == 10)
                    {//if exponentia;
                        Analyzed.set(i, String.valueOf(Math.exp(val)));
                        Analyzed.remove(i+1);//remove the number that was worked on from array
                        j=matches.length;//if one was done just leave the loop, no need to keep looping
                    }
                }
            }
        }
    
    private void BaseConvertingFunc(int from, int to)
    {
        int ans=0;

        if(from!=10)//if not converting from base 10
        {//then convert to base ten
        int[] arrayinInt = new int [Display.getText().length()];
            for (int i =0; i <arrayinInt.length; i++)
            {
               if((Display.getText().charAt(i)>='0')&&(Display.getText().charAt(i)<='9'))//from 0-9
                     arrayinInt[i] =Display.getText().charAt(i)-'0';//change the char to int subtract char zero to change from ASCII
                else if((Display.getText().toUpperCase().charAt(i) >= 'A') && (Display.getText().toUpperCase().charAt(i) <= 'F'))//from 0-9
                    arrayinInt[i] = Display.getText().charAt(i)-55;////A in ASCII is 65 therefor -55 would be 10 same for B-F which is 11-15
                if(arrayinInt[i]>=from) throw new IllegalArgumentException("Invalid Base Character");//if input contains character that is not valid in the respective base.. throw
            }
            for (int i = arrayinInt.length-1, j=0;i>=0;i--,j++)//i count backwards j count forward
            {
               ans += arrayinInt[i]*(int)Math.pow(from,j);//eg:: 76 from base 8 to base 10 = 7*8^1 + 6*8^0
            }
        }

        else ans = Integer.parseInt(Display.getText());//if converting from base 10 then just go to the next step without previous process
        if (to == 10)LogArea.append("\nANS:\t"+ans);//if converting to base 10 then just give answer
        else
        {//else convert to what is to be converted to from base 10
            ArrayList<Integer> answer = new ArrayList() ;//used array list since initial size is unknown
            while(ans>0)//once answer is equal to zero stop..
            {
                answer.add(ans%to);//put the remainder into the array
                ans/=to;//then answer is equal to the division value
            }
            LogArea.append("\nANS:\t");
            for (int i = answer.size()-1; i>=0; i--)
            {
                if(answer.get(i)<=9)//if its within 9 or less i.e normal numbers
                LogArea.append(answer.get(i)+"");//then just append to log
                else if((answer.get(i)>9)&&(answer.get(i)<16))
                {//if its in base 16 that is 10 -15 that should be A-F
                    char c = (char)(answer.get(i)+55);//convert to ascii by adding 55 to give A to F then pass to char
                    LogArea.append(c+"");//append
                }
            }
        }
    }
    private void keyboardSetting()//disable keyboard1
{//this deactivates the keyboard except for certain characters
    Display.addKeyListener(new KeyAdapter(){
    @Override
    public void keyTyped(KeyEvent evt){
    char c = evt.getKeyChar();
    java.awt.event.ActionEvent e = null;//just to be able to call the button function
    if (c=='.') {Btn_DecPntActionPerformed(e);evt.consume();} //override decimal point to the defined process in the button
    else if(c=='*'){Multiply_BtnActionPerformed(e);evt.consume();}
    else if (c=='/') {Divide_BtnActionPerformed(e);evt.consume();}//override / to ÷
    else if (c=='+'){Plus_BtnActionPerformed(e);evt.consume();}
    else if(c=='-'){Minus_BtnActionPerformed(e);evt.consume();}//override +and - buttons also
    else if((c>='0')&&(c<='9'));//allow digits
    else if(c=='('){Opn_BracketActionPerformed(e);evt.consume();}
    else if(c == ')'){Cls_BracketActionPerformed(e);evt.consume();}//override open and close brackets
    else if (c=='^'){PowerBtnActionPerformed(e);evt.consume();}//override power button
    else evt.consume();//destroy or else
    }
            });
}
       private void keyboardSetting2()//disable keyboard2
{//this deactivates the keyboard except for certain numbers
    Display.addKeyListener(new KeyAdapter(){
    @Override
    public void keyTyped(KeyEvent evt){
    char c = evt.getKeyChar();
    java.awt.event.ActionEvent e = null;//just to be able to call the button function
     if((c>='0')&&(c<='9'));//allow digits
    else evt.consume();//destroy or else
    }
            });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Base_Converter;
    private javax.swing.JButton Bracket_minus_Btn;
    private javax.swing.JButton Btn_0;
    private javax.swing.JButton Btn_1;
    private javax.swing.JButton Btn_2;
    private javax.swing.JButton Btn_3;
    private javax.swing.JButton Btn_4;
    private javax.swing.JButton Btn_5;
    private javax.swing.JButton Btn_6;
    private javax.swing.JButton Btn_7;
    private javax.swing.JButton Btn_8;
    private javax.swing.JButton Btn_9;
    private javax.swing.JButton Btn_A;
    private javax.swing.JButton Btn_Ans;
    private javax.swing.JButton Btn_B;
    private javax.swing.JButton Btn_C;
    private javax.swing.JButton Btn_D;
    private javax.swing.JButton Btn_DecPnt;
    private javax.swing.JButton Btn_E;
    private javax.swing.JButton Btn_F;
    private javax.swing.JButton Button_I;
    private javax.swing.JButton CE_Btn;
    private javax.swing.JLabel CalculatorLabel;
    private javax.swing.JButton ChangeMatrixValue;
    private javax.swing.JButton Clear_Btn;
    private javax.swing.JButton Cls_Bracket;
    private javax.swing.JPanel CommonTab;
    private javax.swing.JComboBox ComplexOpCombo;
    private javax.swing.JPanel Complex_Tab;
    private javax.swing.JButton Cr8MatrixBtn;
    private javax.swing.JButton Del_Btn;
    private javax.swing.JButton DeterminantBtn;
    private javax.swing.JTextField Display;
    private javax.swing.JButton Divide_Btn;
    private javax.swing.JButton Divide_Btn1;
    private javax.swing.JComboBox EqnComboBox;
    private javax.swing.JPanel Equation_Tab;
    private javax.swing.JComboBox FromBase;
    private javax.swing.JComboBox FunctionsComboBox;
    private javax.swing.JLabel Instruction;
    private javax.swing.JTextArea LogArea;
    private javax.swing.JComboBox MatrixOperator;
    private javax.swing.JComboBox MatrixParameter1;
    private javax.swing.JComboBox MatrixParameter2;
    private javax.swing.JPanel Matrix_Tab;
    private javax.swing.JButton Minus_Btn;
    private javax.swing.JButton Minus_Btn1;
    private javax.swing.JButton Multiply_Btn;
    private javax.swing.JButton Multiply_Btn1;
    private javax.swing.JButton Opn_Bracket;
    private javax.swing.JTabbedPane Parent_Tab;
    private javax.swing.JButton Plus_Btn;
    private javax.swing.JButton Plus_Btn1;
    private javax.swing.JButton PolarSignBtn;
    private javax.swing.JButton PowerBtn;
    private javax.swing.JButton RootBtn;
    private javax.swing.JLabel Settings;
    private javax.swing.JPanel StandardTab;
    private javax.swing.JComboBox ToBase;
    private javax.swing.JLabel ValLabel1;
    private javax.swing.JLabel ValLabel2;
    private javax.swing.JLabel ValLabel3;
    private javax.swing.JLabel ValLabel4;
    private javax.swing.JTextField ValTextField1;
    private javax.swing.JTextField ValTextField2;
    private javax.swing.JTextField ValTextField3;
    private javax.swing.JTextField ValTextField4;
    private javax.swing.JButton ViewMatrixBtn;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}